import { useState, useCallback } from "react";
import {
  useAccount,
  useWaitForTransactionReceipt,
  useSendTransaction,
} from "wagmi";
import { getFlyTransaction, executeFlySwap } from "@/lib/api/fly-api";
import type { SwapQuote } from "@/types";

interface UseSwapExecutionProps {
  quote: SwapQuote | null;
  gasless: boolean;
  onSuccess?: () => void;
}

export function useSwapExecution({
  quote,
  gasless,
  onSuccess,
}: UseSwapExecutionProps) {
  const { address } = useAccount();
  const [isExecuting, setIsExecuting] = useState(false);
  const [executionError, setExecutionError] = useState<string | null>(null);
  const [swapId, setSwapId] = useState<string | null>(null);

  const {
    sendTransaction,
    isPending: isTransactionPending,
    data: txHash,
  } = useSendTransaction();
  const { isLoading: isTransactionConfirming } = useWaitForTransactionReceipt({
    hash: txHash,
  });

  const executeSwap = useCallback(async () => {
    if (!quote || !address) {
      setExecutionError("Missing quote or wallet address");
      return;
    }

    setIsExecuting(true);
    setExecutionError(null);

    try {
      if (gasless) {
        // Execute gasless swap through Fly protocol
        console.log("Executing gasless swap...");

        // For gasless swaps, we need to sign permit and swap signatures
        // This is a simplified implementation - in reality, you'd need to:
        // 1. Sign permit for token approval
        // 2. Sign swap transaction
        // 3. Send signatures to Fly protocol for execution

        const swapResult = await executeFlySwap({
          networkName: "ethereum", // This should be derived from the quote
          quoteId: quote.id,
          swapSignature: "0x...", // Would be generated by signing
          permitSignature: "0x...", // Would be generated by signing
          permitDeadline: Math.floor(Date.now() / 1000) + 3600, // 1 hour
        });

        setSwapId(swapResult.id);
        console.log("Gasless swap initiated:", swapResult);
      } else {
        // Execute swap with user's own gas
        console.log("Executing self-paid swap...");

        const isCross = Boolean(
          (quote as any)?.route?.some?.(
            (r: any) => r.fromChainId !== r.toChainId
          )
        );
        const transactionData = await getFlyTransaction(quote.id, isCross);

        // Send raw transaction (no ABI)
        sendTransaction({
          to: transactionData.to as `0x${string}`,
          data: transactionData.data as `0x${string}`,
          value: transactionData.value
            ? BigInt(transactionData.value)
            : undefined,
          gas: transactionData.gasLimit
            ? BigInt(transactionData.gasLimit)
            : undefined,
          gasPrice: transactionData.gasPrice
            ? BigInt(transactionData.gasPrice)
            : undefined,
        });
      }

      onSuccess?.();
    } catch (error: any) {
      console.error("Swap execution failed:", error);
      const apiMsg =
        typeof error?.message === "string"
          ? error.message
          : "Swap execution failed";
      setExecutionError(apiMsg);
    } finally {
      setIsExecuting(false);
    }
  }, [quote, address, gasless, sendTransaction, onSuccess]);

  const isLoading =
    isExecuting || isTransactionPending || isTransactionConfirming;

  return {
    executeSwap,
    isLoading,
    isExecuting,
    isTransactionPending,
    isTransactionConfirming,
    executionError,
    swapId,
  };
}
